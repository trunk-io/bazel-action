name: Trunk Upload and Test Impacted Targets
author: trunk.io
description: Trunk.io Github Action to Compute, Upload, and Test Impacted Targets

inputs:
  trunk-token:
    description:
      Repo API token used for authentication. Can be found at app.trunk.io. Required if
      upload-targets
    required: false
  target-branch:
    description:
      The Merge Instance's target branch. If unspecified, defaults to the repository's default
      branch.
    required: false
  bazel-workspace-path:
    description:
      The path to the bazel WORKSPACE, relative to the root of the git repository. If unspecified,
      defaults to the root of the repository.
    required: false
  verbose:
    description: Whether to enable verbose logging. Defaults to false.
    required: false
  bazel-startup-options:
    description:
      A comma separated list of startup options to pass to Bazel. See
      https://bazel.build/reference/command-line-reference#startup-options for a complete list. If
      unspecified, no startup options are specified.
    required: false
  bazel-path:
    description: A path to the Bazel executable. Defaults to PATH.
    required: false
    default: bazel
  impact-all-filters-path:
    description:
      A path to a list of filters to identify whether `ALL` impacted targets should be considered.
      See https://github.com/dorny/paths-filter/blob/master/.github/filters.yml for an example.
    required: false
    default: ""
  upload-targets:
    description:
      Upload targets to the Trunk MergeGraph. Required for each PR if using the MergeGraph.
    required: false
    default: "false"
  test-targets:
    description: Run bazel test on the computed targets. Recommended if running on PRs.
    required: false
    default: "true"
  bazel-test-command:
    description: The command to run against bazel when running tests.
    required: false
    default: test
  bazel-diff-args:
    description: Additional args to append to the bazel diff command.
    required: false
    default: ""
  test-kind-filter:
    description: Kind filter to apply to impacted targets
    required: false
    default: .+_library|.+_binary|.+_test
  test-scope-filter:
    description: Scope filter to apply to impacted targets
    required: false
  test-negative-kind-filter:
    description: Negative kind filter to apply to impacted targets
    required: false
    default: generated file
  test-negative-scope-filter:
    description: Negative scope filter to apply to impacted targets
    required: false
    default: //external
  test-negative-tag-filter:
    description: Negative tag filter to apply to impacted targets
    required: false
  enable-trunk-ci-debugger:
    description: Enable support for the Trunk ci debugger (https://docs.trunk.io/ci-debugger)
    required: false
    default: false
  trunk-ci-debugger-breakpoint-name:
    description: Name of the trunk breakpoint to apply
    required: false
    default: my-breakpoint

runs:
  using: composite
  steps:
    - name: Validate inputs
      id: validate-inputs
      if: inputs.upload-targets != 'true' && inputs.test-targets != 'true'
      run: echo "Must upload or test impacted targets" && exit 1
      shell: bash

    - name: Detect changed paths
      id: detect-changed-paths
      if: ${{ inputs.impact-all-filters-path != '' }}
      # trunk-ignore(semgrep/yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha)
      uses: dorny/paths-filter@v2
      with:
        filters: ${{ inputs.impact-all-filters-path }}

    - name: Setup jq
      # trunk-ignore(semgrep): Trust third-party action to install JQ. Source code: https://github.com/dcarbone/install-jq-action/
      uses: dcarbone/install-jq-action@v1.0.1

    - name: Prerequisites
      id: prerequisites
      run: ${GITHUB_ACTION_PATH}/src/scripts/prerequisites.sh
      shell: bash
      env:
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
        PR_BRANCH: ${{ github.head_ref }}
        WORKSPACE_PATH: ${{ inputs.bazel-workspace-path }}
        BAZEL_PATH: ${{ inputs.bazel-path }}
        IMPACTS_FILTERS_CHANGES: ${{ steps.detect-changed-paths.outputs.changes }}

    - name: Install Bazel in PATH
      if: ${{ steps.prerequisites.outputs.requires_default_bazel_installation == 'true' }}
      uses: bazelbuild/setup-bazelisk@v2

    - name: Setup bazel-diff
      id: bazel-diff
      run: ${GITHUB_ACTION_PATH}/src/scripts/setup_bazel_diff.sh
      shell: bash
      env:
        WORKSPACE_PATH: ${{ inputs.bazel-workspace-path }}

    - name: Compute Impacted Targets for Uploading
      id: compute-impacted-targets-upload
      run: ${GITHUB_ACTION_PATH}/src/scripts/compute_impacted_targets.sh
      if:
        steps.prerequisites.outputs.impacts_all_detected == 'false' && inputs.upload-targets ==
        'true'
      shell: bash
      env:
        MERGE_INSTANCE_BRANCH_HEAD_SHA:
          ${{ steps.prerequisites.outputs.merge_instance_branch_head_sha }}
        PR_BRANCH_HEAD_SHA: ${{ steps.prerequisites.outputs.pr_branch_upload_head_sha }}
        VERBOSE: ${{ inputs.verbose }}
        WORKSPACE_PATH: ${{ steps.prerequisites.outputs.workspace_path }}
        BAZEL_PATH: ${{ inputs.bazel-path }}
        BAZEL_DIFF_CMD: ${{ steps.bazel-diff.outputs.bazel_diff_cmd }}
        BAZEL_DIFF_ARGS: ${{ inputs.bazel-diff-args }}
        BAZEL_STARTUP_OPTIONS: ${{ inputs.bazel-startup-options }}

    - name: Upload Impacted Targets
      if: inputs.upload-targets == 'true'
      run: ${GITHUB_ACTION_PATH}/src/scripts/upload_impacted_targets.sh
      shell: bash
      continue-on-error: true
      env:
        ACTOR: ${{ github.actor }}
        API_TOKEN: ${{ inputs.trunk-token }}
        REPOSITORY: ${{ github.repository }}
        TARGET_BRANCH: ${{ steps.prerequisites.outputs.merge_instance_branch }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_SHA: ${{ steps.prerequisites.outputs.pr_branch_upload_head_sha }}
        IMPACTED_TARGETS_FILE:
          ${{ steps.compute-impacted-targets-upload.outputs.impacted_targets_out }}
        IMPACTS_ALL_DETECTED: ${{ steps.prerequisites.outputs.impacts_all_detected }}

      # Although they share the same core logic, the computation of the testable targets is dependent on the
      # merge-base of the target branch, not on the HEAD of the target branch, so it has the potential to be
      # a distinct diff and must be recomputed.
    - name: Compute Impacted Targets for Testing
      id: compute-impacted-targets-test
      run: ${GITHUB_ACTION_PATH}/src/scripts/compute_impacted_targets.sh
      if: inputs.test-targets == 'true'
      shell: bash
      env:
        # Use base sha instead of merge instance branch head sha for testing
        MERGE_INSTANCE_BRANCH_HEAD_SHA: ${{ steps.prerequisites.outputs.merge_base_sha }}
        PR_BRANCH_HEAD_SHA: ${{ steps.prerequisites.outputs.pr_branch_testing_head_sha }}
        VERBOSE: ${{ inputs.verbose }}
        WORKSPACE_PATH: ${{ steps.prerequisites.outputs.workspace_path }}
        BAZEL_PATH: ${{ inputs.bazel-path }}
        BAZEL_DIFF_CMD: ${{ steps.bazel-diff.outputs.bazel_diff_cmd }}
        BAZEL_DIFF_ARGS: ${{ inputs.bazel-diff-args }}
        BAZEL_STARTUP_OPTIONS: ${{ inputs.bazel-startup-options }}

    - name: Test Impacted Targets
      if: inputs.test-targets == 'true' && !inputs.enable-trunk-ci-debugger
      id: test-impacted-targets
      run: ${GITHUB_ACTION_PATH}/src/scripts/test_impacted_targets.sh
      working-directory: ${{ steps.prerequisites.outputs.workspace_path }}
      shell: bash
      env:
        IMPACTED_TARGETS_FILE:
          ${{ steps.compute-impacted-targets-test.outputs.impacted_targets_out }}
        BAZEL_PATH: ${{ inputs.bazel-path }}
        BAZEL_TEST_COMMAND: ${{ inputs.bazel-test-command }}
        BAZEL_STARTUP_OPTIONS: ${{ inputs.bazel-startup-options }}
        BAZEL_KIND_FILTER: ${{ inputs.test-kind-filter }}
        BAZEL_SCOPE_FILTER: ${{ inputs.test-scope-filter }}
        BAZEL_NEGATIVE_KIND_FILTER: ${{ inputs.test-negative-kind-filter }}
        BAZEL_NEGATIVE_SCOPE_FILTER: ${{ inputs.test-negative-scope-filter }}
        BAZEL_NEGATIVE_TAG_FILTER: ${{ inputs.test-negative-tag-filter }}
        CI: "true"

    - name: Test Impacted Targets (with debugger)
      if: inputs.test-targets == 'true' && inputs.enable-trunk-ci-debugger
      id: test-impacted-targets-dbg
      uses: trunk-io/breakpoint@v1
      with:
        breakpoint-id: ${{ inputs.trunk-ci-debugger-breakpoint-name }}
        trunk-token: ${{ inputs.trunk-token }}
        run: ${{ github.action_path }}/src/scripts/test_impacted_targets.sh
        working-directory: ${{ steps.prerequisites.outputs.workspace_path }}
        shell: bash
      env:
        IMPACTED_TARGETS_FILE:
          ${{ steps.compute-impacted-targets-test.outputs.impacted_targets_out }}
        BAZEL_PATH: ${{ inputs.bazel-path }}
        BAZEL_TEST_COMMAND: ${{ inputs.bazel-test-command }}
        BAZEL_STARTUP_OPTIONS: ${{ inputs.bazel-startup-options }}
        BAZEL_KIND_FILTER: ${{ inputs.test-kind-filter }}
        BAZEL_SCOPE_FILTER: ${{ inputs.test-scope-filter }}
        BAZEL_NEGATIVE_KIND_FILTER: ${{ inputs.test-negative-kind-filter }}
        BAZEL_NEGATIVE_SCOPE_FILTER: ${{ inputs.test-negative-scope-filter }}
        BAZEL_NEGATIVE_TAG_FILTER: ${{ inputs.test-negative-tag-filter }}
        CI: "true"
